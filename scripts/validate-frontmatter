#!/usr/bin/env node
/**
 * Validate pages frontmatter against a schema
 */
const { readFileSync } = require(`fs`)
const path = require(`path`)
const frontmatter = require(`@github-docs/frontmatter`)
const glob = require(`glob`)
const pc = require(`picocolors`)
const sprintf = require(`sprintf-js`).sprintf
const validTags = require(`../src/_data/tags`)
const { isStringInArray } = require(`./util`)

const permalinkRegex = /^\/|(\/[\w-]+)+$/
const slugRegex = /^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$/

const revalidateSchema = {
  properties: {
    title: {
      type: `string`,
      description: `The title for the page, used for page title and the <h1> heading`,
      minLength: 4, // shortest title is 'Home'
      maxLength: 80,
      required: true,
      messages: {
        minLength: `The frontmatter title is too short, the given title is only %(actual)u characters long but should be at least %(expected)u characters long`,
        maxLength: `SEO recommendation for title length is no more than 70-80 characters, the given title is %(actual)u characters long but should not be longer than %(expected)u characters long`,
        required: `A title set in frontmatter for the page is required, e.g. 'title: "Hello World"'`,
      },
    },
    description: {
      type: `string`,
      description: `A long description for the page, for use when the description doesn't make sense as a continuation in main content using the <!-- excerpt --> separator`,
      required: false,
      messages: {
        type: `The page description must be a string, received %(actual)u`,
      },
    },
    slug: {
      type: `string`,
      description: `a sluggified URL identifier for use in the page route`,
      pattern: slugRegex,
      required: false,
      messages: {
        pattern: `The slug given is not a valid URL identifier, received %(actual)j`,
        required: `A path slug set in frontmatter for the page is required, e.g. 'slug: hello-world'`,
      },
    },
    date: {
      type: `object`,
      description: `Date the article was created in ISO YYYY-MM-DD format`,
      required: true,
      messages: {
        type: `The date given is not in YYYY-MM-DD format`,
        required: `A date set in frontmatter for the page is required, e.g. 'date: 2021-03-31'`,
      },
    },
    /** Not sure if adding tags in Markdown file appends to tags or replaces it */
    tags: {
      type: [`string`],
      conform: tags => isStringInArray(tags, validTags),
      description: `tags applied to this item`,
      required: false,
      default: `article`,
      messages: {
        type: `The tags given are not an array of strings, received %(actual)s`,
        conform: `The tags given are not in the list of valid tags (src/_data/tags.js), received %(actual)s`,
      },
    },
    layout: {
      enum: [`article`, `base`, `page`],
      type: `string`,
      description: `Name of the layout to use for this page.`,
      required: false,
      default: `article`,
      messages: {
        enum: `The 'layout' option set in front matter is not a valid value, received '%(actual)s' and layout should be one of 'article', 'base', or 'page'`,
      },
    },
    permalink: {
      type: `string`,
      description: `Path with leading slash to the permalink for this article.`,
      pattern: permalinkRegex,
      maxLength: 2000,
      required: false,
      messages: {
        pattern: `The 'permalink' option set in front matter is not a valid relative path, e.g.: 'permalink: /articles/hello-world/' received '%(actual)s'`,
      },
    },
    eleventyExcludeFromCollections: {
      type: `boolean`,
      description: `Opt out of specific pieces of content being added to all collections.`,
      default: false,
      messages: {
        type: `The eleventyExcludeFromCollections option should be set to boolean 'true' or 'false', received '%(actual)s'`,
      },
    },
    eleventyNavigation: {
      type: 'object',
      required: false,
      properties: {
        key: {
          type: 'string',
          description: `a sluggified URL identifier for use in the page route`,
          pattern: slugRegex,
          required: true,
          messages: {
            pattern: `The key given is not a valid URL identifier, received %(actual)j`,
            required: `A key set in frontmatter for eleventyNavigation is required if navigation is used, e.g. 'key: case-studies'`,
          },
        },
        title: {
          type: 'string',
          description: `A title for the page to use in navigation links`,
          minLength: 5,
          maxLength: 60,
          messages: {
            minLength: `The navigation link title is too short, the given title is only %(actual)u characters long but should be at least %(expected)u characters long`,
            maxLength: `The navigation link is too long, the given title is %(actual)u characters long but should not be longer than %(expected)u characters long`,
            required: `A navigation link title set in frontmatter for the page is required if navigation is used, e.g. 'title: "Case Studies"'`,
          },
        },
        order: {
          type: 'integer',
          description: `The order in the menu to display this page as a navigation link`,
          required: true,
          messages: {
            type: `The navigation link order must be an integer, %(actual)u received`,
            required: `A navigation link title set in frontmatter for the page is required if navigation is used, e.g. 'order: 2'`,
          },
        },
      },
    },
    featured: {
      type: `boolean`,
      description: `Whether the article should be displayed differently as featured articles.`,
      default: false,
      messages: {
        type: `The featured article option should be set to boolean 'true' or 'false', received '%(actual)s'`,
      },
    },
    image: {
      type: `string`,
      description: `The cover photo file name to show in the hero header section of an article.`,
      default: `cover.jpg`,
      messages: {
        type: `The image option to set a cover photo file name should be set to a string e.g. 'image: cover.jpg', received '%(actual)s'`,
      },
    },
    cardImage: {
      type: `string`,
      description: `A smaller card image file name to use on list views and social media.`,
      required: false,
      default: null,
      messages: {
        type: `The cardImage option to set a cover photo file name should be set to a string e.g. 'cardImage: extra.jpg', received '%(actual)s'`,
      },
    },
  },
}

const frontmatterOptions = (revalidateSchema, markdownFilePath) => {
  return {
    schema: revalidateSchema,
    // The name of the file being parsed. Useful for debugging when errors occur.
    filepath: markdownFilePath,
    // If true, checks that all keys are specified as schema properties. Defaults to false.
    validateKeyNames: true,
    // If true, checks that all keys are in the same order they appear in the schema. Defaults to false.
    validateKeyOrder: false,
  }
}

/**
 * Get the Markdown and Nunjucks files in the pages
 * directory by glob, loop over them, and report errors
 */
const pagePaths = path.resolve(`./src/pages/**/*.{md,njk}`)
glob.sync(pagePaths).forEach(pagePath => {
  const { errors } = frontmatter(
    readFileSync(pagePath, `utf8`),
    frontmatterOptions(revalidateSchema, pagePath)
  )

  if (errors.length) {
    // The filpaths of all errors in array should be the same, so show the first one for group
    console.log(pc.red(`Frontmatter validation error in file:`))
    console.log(`${pc.yellow(errors[0].filepath)}\n`)
    errors.forEach(error => {
      console.log(pc.red(`> Error: ${sprintf(error.message, error)}`))
    })
    console.log(`\n`)
    process.exit(1)
  } else {
    console.log(pc.green(`Front matter validated for page:`))
    console.log(`${pc.yellow(pagePath)}\n`)
  }
})
