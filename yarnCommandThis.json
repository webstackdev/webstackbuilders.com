HelloWorldCommand {
  help: false,
  cwd: undefined,
  path: [ 'build' ],
  context: {
    stdin: <ref *1> ReadStream {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 0,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: null,
        ended: false,
        endEmitted: false,
        reading: false,
        constructed: true,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: null
      },
      _events: [Object: null prototype] {
        end: [Function: onReadableStreamEnd],
        pause: [Function (anonymous)]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 0,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      isRaw: false,
      isTTY: true,
      fd: 0,
      [Symbol(async_id_symbol)]: 2,
      [Symbol(kHandle)]: TTY { reading: false, [Symbol(owner_symbol)]: [Circular *1] },
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    stdout: <ref *2> WriteStream {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 0,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: null,
        ended: false,
        endEmitted: false,
        reading: false,
        constructed: true,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: null
      },
      _events: [Object: null prototype] { end: [Function: onReadableStreamEnd] },
      _eventsCount: 1,
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 0,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      columns: 118,
      rows: 11,
      _type: 'tty',
      fd: 1,
      _isStdio: true,
      destroySoon: [Function: destroy],
      _destroy: [Function: dummyDestroy],
      [Symbol(async_id_symbol)]: 3,
      [Symbol(kHandle)]: TTY { [Symbol(owner_symbol)]: [Circular *2] },
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    stderr: <ref *3> WriteStream {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 0,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: null,
        ended: false,
        endEmitted: false,
        reading: false,
        constructed: true,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: null
      },
      _events: [Object: null prototype] { end: [Function: onReadableStreamEnd] },
      _eventsCount: 1,
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 0,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      columns: 118,
      rows: 11,
      _type: 'tty',
      fd: 2,
      _isStdio: true,
      destroySoon: [Function: destroy],
      _destroy: [Function: dummyDestroy],
      [Symbol(async_id_symbol)]: 5,
      [Symbol(kHandle)]: TTY { [Symbol(owner_symbol)]: [Circular *3] },
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    colorDepth: 24,
    cwd: '/home/kevin/Repos/webstackdev/eleventy.webstackbuilders.com',
    plugins: {
      modules: Map(26) {
        '@yarnpkg/cli' => {
          BaseCommand: [Getter],
          WorkspaceRequiredError: [Getter],
          getDynamicLibs: [Getter],
          getPluginConfiguration: [Getter],
          main: [Getter],
          openWorkspace: [Getter],
          pluginCommands: [Getter]
        },
        '@yarnpkg/core' => {
          BuildType: [Getter],
          Cache: [Getter],
          Configuration: [Getter],
          DEFAULT_LOCK_FILENAME: [Getter],
          DEFAULT_RC_FILENAME: [Getter],
          FormatType: [Getter],
          InstallMode: [Getter],
          LightReport: [Getter],
          LinkType: [Getter],
          Manifest: [Getter],
          MessageName: [Getter],
          MultiFetcher: [Getter],
          PackageExtensionStatus: [Getter],
          PackageExtensionType: [Getter],
          Project: [Getter],
          ProjectLookup: [Getter],
          Report: [Getter],
          ReportError: [Getter],
          SettingsType: [Getter],
          StreamReport: [Getter],
          TAG_REGEXP: [Getter],
          TelemetryManager: [Getter],
          ThrowReport: [Getter],
          VirtualFetcher: [Getter],
          Workspace: [Getter],
          WorkspaceFetcher: [Getter],
          WorkspaceResolver: [Getter],
          YarnVersion: [Getter],
          execUtils: [Getter],
          folderUtils: [Getter],
          formatUtils: [Getter],
          hashUtils: [Getter],
          httpUtils: [Getter],
          miscUtils: [Getter],
          nodeUtils: [Getter],
          parseMessageName: [Getter],
          scriptUtils: [Getter],
          semverUtils: [Getter],
          stringifyMessageName: [Getter],
          structUtils: [Getter],
          tgzUtils: [Getter],
          treeUtils: [Getter]
        },
        '@yarnpkg/fslib' => {
          AliasFS: [Getter],
          CwdFS: [Getter],
          DEFAULT_COMPRESSION_LEVEL: [Getter],
          FakeFS: [Getter],
          Filename: [Getter],
          JailFS: [Getter],
          LazyFS: [Getter],
          LinkStrategy: [Getter],
          NoFS: [Getter],
          NodeFS: [Getter],
          PortablePath: [Getter],
          PosixFS: [Getter],
          ProxiedFS: [Getter],
          VirtualFS: [Getter],
          ZipFS: [Getter],
          ZipOpenFS: [Getter],
          constants: [Getter],
          extendFs: [Getter],
          normalizeLineEndings: [Getter],
          npath: [Getter],
          opendir: [Getter],
          patchFs: [Getter],
          ppath: [Getter],
          statUtils: [Getter],
          toFilename: [Getter],
          xfs: [Getter]
        },
        '@yarnpkg/libzip' => { getLibzipPromise: [Getter], getLibzipSync: [Getter] },
        '@yarnpkg/parsers' => {
          parseResolution: [Getter],
          parseShell: [Getter],
          parseSyml: [Getter],
          stringifyArgument: [Getter],
          stringifyArgumentSegment: [Getter],
          stringifyArithmeticExpression: [Getter],
          stringifyCommand: [Getter],
          stringifyCommandChain: [Getter],
          stringifyCommandChainThen: [Getter],
          stringifyCommandLine: [Getter],
          stringifyCommandLineThen: [Getter],
          stringifyEnvSegment: [Getter],
          stringifyRedirectArgument: [Getter],
          stringifyResolution: [Getter],
          stringifyShell: [Getter],
          stringifyShellLine: [Getter],
          stringifySyml: [Getter],
          stringifyValueArgument: [Getter]
        },
        '@yarnpkg/shell' => {
          ShellError: [Getter],
          execute: [Getter],
          globUtils: [Getter]
        },
        'clipanion' => {
          Builtins: [Getter],
          Cli: [Getter],
          Command: [Getter],
          Option: [Getter],
          UsageError: [Getter],
          formatMarkdownish: [Getter]
        },
        'semver' => {
          default: {
            re: [
              /0|[1-9]\d*/,
              /[0-9]+/,
              /\d*[a-zA-Z-][a-zA-Z0-9-]*/,
              /(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)/,
              /([0-9]+)\.([0-9]+)\.([0-9]+)/,
              /(?:0|[1-9]\d*|\d*[a-zA-Z-][a-zA-Z0-9-]*)/,
              /(?:[0-9]+|\d*[a-zA-Z-][a-zA-Z0-9-]*)/,
              /(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][a-zA-Z0-9-]*))*))/,
              /(?:-?((?:[0-9]+|\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\.(?:[0-9]+|\d*[a-zA-Z-][a-zA-Z0-9-]*))*))/,
              /[0-9A-Za-z-]+/,
              /(?:\+([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))/,
              /v?(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\+([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?/,
              /^v?(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\+([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?$/,
              /[v=\s]*([0-9]+)\.([0-9]+)\.([0-9]+)(?:-?((?:[0-9]+|\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\.(?:[0-9]+|\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\+([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?/,
              /^[v=\s]*([0-9]+)\.([0-9]+)\.([0-9]+)(?:-?((?:[0-9]+|\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\.(?:[0-9]+|\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\+([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?$/,
              /((?:<|>)?=?)/,
              /[0-9]+|x|X|\*/,
              /0|[1-9]\d*|x|X|\*/,
              /[v=\s]*(0|[1-9]\d*|x|X|\*)(?:\.(0|[1-9]\d*|x|X|\*)(?:\.(0|[1-9]\d*|x|X|\*)(?:(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\+([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?)?)?/,
              /[v=\s]*([0-9]+|x|X|\*)(?:\.([0-9]+|x|X|\*)(?:\.([0-9]+|x|X|\*)(?:(?:-?((?:[0-9]+|\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\.(?:[0-9]+|\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\+([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?)?)?/,
              /^((?:<|>)?=?)\s*[v=\s]*(0|[1-9]\d*|x|X|\*)(?:\.(0|[1-9]\d*|x|X|\*)(?:\.(0|[1-9]\d*|x|X|\*)(?:(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\+([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?)?)?$/,
              /^((?:<|>)?=?)\s*[v=\s]*([0-9]+|x|X|\*)(?:\.([0-9]+|x|X|\*)(?:\.([0-9]+|x|X|\*)(?:(?:-?((?:[0-9]+|\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\.(?:[0-9]+|\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\+([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?)?)?$/,
              /(^|[^\d])(\d{1,16})(?:\.(\d{1,16}))?(?:\.(\d{1,16}))?(?:$|[^\d])/,
              /(^|[^\d])(\d{1,16})(?:\.(\d{1,16}))?(?:\.(\d{1,16}))?(?:$|[^\d])/g,
              /(?:~>?)/,
              /(\s*)(?:~>?)\s+/g,
              /^(?:~>?)[v=\s]*(0|[1-9]\d*|x|X|\*)(?:\.(0|[1-9]\d*|x|X|\*)(?:\.(0|[1-9]\d*|x|X|\*)(?:(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\+([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?)?)?$/,
              /^(?:~>?)[v=\s]*([0-9]+|x|X|\*)(?:\.([0-9]+|x|X|\*)(?:\.([0-9]+|x|X|\*)(?:(?:-?((?:[0-9]+|\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\.(?:[0-9]+|\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\+([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?)?)?$/,
              /(?:\^)/,
              /(\s*)(?:\^)\s+/g,
              /^(?:\^)[v=\s]*(0|[1-9]\d*|x|X|\*)(?:\.(0|[1-9]\d*|x|X|\*)(?:\.(0|[1-9]\d*|x|X|\*)(?:(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\+([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?)?)?$/,
              /^(?:\^)[v=\s]*([0-9]+|x|X|\*)(?:\.([0-9]+|x|X|\*)(?:\.([0-9]+|x|X|\*)(?:(?:-?((?:[0-9]+|\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\.(?:[0-9]+|\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\+([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?)?)?$/,
              /^((?:<|>)?=?)\s*([v=\s]*([0-9]+)\.([0-9]+)\.([0-9]+)(?:-?((?:[0-9]+|\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\.(?:[0-9]+|\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\+([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?)$|^$/,
              /^((?:<|>)?=?)\s*(v?(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\+([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?)$|^$/,
              /(\s*)((?:<|>)?=?)\s*([v=\s]*([0-9]+)\.([0-9]+)\.([0-9]+)(?:-?((?:[0-9]+|\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\.(?:[0-9]+|\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\+([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?|[v=\s]*(0|[1-9]\d*|x|X|\*)(?:\.(0|[1-9]\d*|x|X|\*)(?:\.(0|[1-9]\d*|x|X|\*)(?:(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\+([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?)?)?)/g,
              /^\s*([v=\s]*(0|[1-9]\d*|x|X|\*)(?:\.(0|[1-9]\d*|x|X|\*)(?:\.(0|[1-9]\d*|x|X|\*)(?:(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\+([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?)?)?)\s+-\s+([v=\s]*(0|[1-9]\d*|x|X|\*)(?:\.(0|[1-9]\d*|x|X|\*)(?:\.(0|[1-9]\d*|x|X|\*)(?:(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\+([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?)?)?)\s*$/,
              /^\s*([v=\s]*([0-9]+|x|X|\*)(?:\.([0-9]+|x|X|\*)(?:\.([0-9]+|x|X|\*)(?:(?:-?((?:[0-9]+|\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\.(?:[0-9]+|\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\+([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?)?)?)\s+-\s+([v=\s]*([0-9]+|x|X|\*)(?:\.([0-9]+|x|X|\*)(?:\.([0-9]+|x|X|\*)(?:(?:-?((?:[0-9]+|\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\.(?:[0-9]+|\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\+([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?)?)?)\s*$/,
              /(<|>)?=?\s*\*/,
              /^\s*>=\s*0.0.0\s*$/,
              /^\s*>=\s*0.0.0-0\s*$/
            ],
            src: [
              '0|[1-9]\\d*',
              '[0-9]+',
              '\\d*[a-zA-Z-][a-zA-Z0-9-]*',
              '(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)',
              '([0-9]+)\\.([0-9]+)\\.([0-9]+)',
              '(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)',
              '(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)',
              '(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))',
              '(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))',
              '[0-9A-Za-z-]+',
              '(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))',
              'v?(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?',
              '^v?(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?$',
              '[v=\\s]*([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?',
              '^[v=\\s]*([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?$',
              '((?:<|>)?=?)',
              '[0-9]+|x|X|\\*',
              '0|[1-9]\\d*|x|X|\\*',
              '[v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?',
              '[v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?',
              '^((?:<|>)?=?)\\s*[v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$',
              '^((?:<|>)?=?)\\s*[v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$',
              '(^|[^\\d])(\\d{1,16})(?:\\.(\\d{1,16}))?(?:\\.(\\d{1,16}))?(?:$|[^\\d])',
              '(^|[^\\d])(\\d{1,16})(?:\\.(\\d{1,16}))?(?:\\.(\\d{1,16}))?(?:$|[^\\d])',
              '(?:~>?)',
              '(\\s*)(?:~>?)\\s+',
              '^(?:~>?)[v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$',
              '^(?:~>?)[v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$',
              '(?:\\^)',
              '(\\s*)(?:\\^)\\s+',
              '^(?:\\^)[v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$',
              '^(?:\\^)[v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$',
              '^((?:<|>)?=?)\\s*([v=\\s]*([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)$|^$',
              '^((?:<|>)?=?)\\s*(v?(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)$|^$',
              '(\\s*)((?:<|>)?=?)\\s*([v=\\s]*([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?|[v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?)',
              '^\\s*([v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?)\\s+-\\s+([v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?)\\s*$',
              '^\\s*([v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?)\\s+-\\s+([v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?)\\s*$',
              '(<|>)?=?\\s*\\*',
              '^\\s*>=\\s*0.0.0\\s*$',
              '^\\s*>=\\s*0.0.0-0\\s*$'
            ],
            tokens: {
              NUMERICIDENTIFIER: 0,
              NUMERICIDENTIFIERLOOSE: 1,
              NONNUMERICIDENTIFIER: 2,
              MAINVERSION: 3,
              MAINVERSIONLOOSE: 4,
              PRERELEASEIDENTIFIER: 5,
              PRERELEASEIDENTIFIERLOOSE: 6,
              PRERELEASE: 7,
              PRERELEASELOOSE: 8,
              BUILDIDENTIFIER: 9,
              BUILD: 10,
              FULLPLAIN: 11,
              FULL: 12,
              LOOSEPLAIN: 13,
              LOOSE: 14,
              GTLT: 15,
              XRANGEIDENTIFIERLOOSE: 16,
              XRANGEIDENTIFIER: 17,
              XRANGEPLAIN: 18,
              XRANGEPLAINLOOSE: 19,
              XRANGE: 20,
              XRANGELOOSE: 21,
              COERCE: 22,
              COERCERTL: 23,
              LONETILDE: 24,
              TILDETRIM: 25,
              TILDE: 26,
              TILDELOOSE: 27,
              LONECARET: 28,
              CARETTRIM: 29,
              CARET: 30,
              CARETLOOSE: 31,
              COMPARATORLOOSE: 32,
              COMPARATOR: 33,
              COMPARATORTRIM: 34,
              HYPHENRANGE: 35,
              HYPHENRANGELOOSE: 36,
              STAR: 37,
              GTE0: 38,
              GTE0PRE: 39
            },
            SEMVER_SPEC_VERSION: '2.0.0',
            SemVer: [class Bs],
            compareIdentifiers: [Function: OU],
            rcompareIdentifiers: [Function: zde],
            parse: [Function: Zde],
            valid: [Function: eCe],
            clean: [Function: rCe],
            inc: [Function: nCe],
            diff: [Function: lCe],
            major: [Function: uCe],
            minor: [Function: fCe],
            patch: [Function: pCe],
            prerelease: [Function: CCe],
            compare: [Function: sCe],
            rcompare: [Function: ECe],
            compareLoose: [Function: yCe],
            compareBuild: [Function: wCe],
            sort: [Function: bCe],
            rsort: [Function: SCe],
            gt: [Function: xCe],
            lt: [Function: PCe],
            eq: [Function: aCe],
            neq: [Function: RCe],
            gte: [Function: NCe],
            lte: [Function: TCe],
            cmp: [Function: GCe],
            coerce: [Function: JCe],
            Comparator: [class xp],
            Range: [class pg],
            satisfies: [Function: Cme],
            toComparators: [Function: Eme],
            maxSatisfying: [Function: wme],
            minSatisfying: [Function: Qme],
            minVersion: [Function: vme],
            validRange: [Function: kme],
            outside: [Function: Tme],
            gtr: [Function: Mme],
            ltr: [Function: Ume],
            intersects: [Function: Hme],
            simplifyRange: [Function (anonymous)],
            subset: [Function: qme]
          },
          re: [Getter],
          src: [Getter],
          tokens: [Getter],
          SEMVER_SPEC_VERSION: [Getter],
          SemVer: [Getter],
          compareIdentifiers: [Getter],
          rcompareIdentifiers: [Getter],
          parse: [Getter],
          valid: [Getter],
          clean: [Getter],
          inc: [Getter],
          diff: [Getter],
          major: [Getter],
          minor: [Getter],
          patch: [Getter],
          prerelease: [Getter],
          compare: [Getter],
          rcompare: [Getter],
          compareLoose: [Getter],
          compareBuild: [Getter],
          sort: [Getter],
          rsort: [Getter],
          gt: [Getter],
          lt: [Getter],
          eq: [Getter],
          neq: [Getter],
          gte: [Getter],
          lte: [Getter],
          cmp: [Getter],
          coerce: [Getter],
          Comparator: [Getter],
          Range: [Getter],
          satisfies: [Getter],
          toComparators: [Getter],
          maxSatisfying: [Getter],
          minSatisfying: [Getter],
          minVersion: [Getter],
          validRange: [Getter],
          outside: [Getter],
          gtr: [Getter],
          ltr: [Getter],
          intersects: [Getter],
          simplifyRange: [Getter],
          subset: [Getter]
        },
        'typanion' => {
          KeyRelationship: [Getter],
          applyCascade: [Getter],
          base64RegExp: [Getter],
          colorStringAlphaRegExp: [Getter],
          colorStringRegExp: [Getter],
          computeKey: [Getter],
          getPrintable: [Getter],
          hasExactLength: [Getter],
          hasForbiddenKeys: [Getter],
          hasKeyRelationship: [Getter],
          hasMaxLength: [Getter],
          hasMinLength: [Getter],
          hasMutuallyExclusiveKeys: [Getter],
          hasRequiredKeys: [Getter],
          hasUniqueItems: [Getter],
          isArray: [Getter],
          isAtLeast: [Getter],
          isAtMost: [Getter],
          isBase64: [Getter],
          isBoolean: [Getter],
          isDate: [Getter],
          isDict: [Getter],
          isEnum: [Getter],
          isHexColor: [Getter],
          isISO8601: [Getter],
          isInExclusiveRange: [Getter],
          isInInclusiveRange: [Getter],
          isInstanceOf: [Getter],
          isInteger: [Getter],
          isJSON: [Getter],
          isLiteral: [Getter],
          isLowerCase: [Getter],
          isNegative: [Getter],
          isNullable: [Getter],
          isNumber: [Getter],
          isObject: [Getter],
          isOneOf: [Getter],
          isOptional: [Getter],
          isPositive: [Getter],
          isString: [Getter],
          isTuple: [Getter],
          isUUID4: [Getter],
          isUnknown: [Getter],
          isUpperCase: [Getter],
          iso8601RegExp: [Getter],
          makeCoercionFn: [Getter],
          makeSetter: [Getter],
          makeTrait: [Getter],
          makeValidator: [Getter],
          matchesRegExp: [Getter],
          plural: [Getter],
          pushError: [Getter],
          simpleKeyRegExp: [Getter],
          uuid4RegExp: [Getter]
        },
        'yup' => {
          default: {
            addMethod: [Function: Zje],
            MixedSchema: [Getter],
            mixed: [Getter],
            BooleanSchema: [Getter],
            bool: [Getter],
            boolean: [Getter],
            StringSchema: [Getter],
            string: [Getter],
            NumberSchema: [Getter],
            number: [Getter],
            DateSchema: [Getter],
            date: [Getter],
            ObjectSchema: [Getter],
            object: [Getter],
            ArraySchema: [Getter],
            array: [Getter],
            ref: [Getter],
            lazy: [Getter],
            ValidationError: [Getter],
            reach: [Getter],
            isSchema: [Getter],
            setLocale: [Getter],
            BaseSchema: [Getter]
          },
          addMethod: [Getter],
          MixedSchema: [Getter],
          mixed: [Getter],
          BooleanSchema: [Getter],
          bool: [Getter],
          boolean: [Getter],
          StringSchema: [Getter],
          string: [Getter],
          NumberSchema: [Getter],
          number: [Getter],
          DateSchema: [Getter],
          date: [Getter],
          ObjectSchema: [Getter],
          object: [Getter],
          ArraySchema: [Getter],
          array: [Getter],
          ref: [Getter],
          lazy: [Getter],
          ValidationError: [Getter],
          reach: [Getter],
          isSchema: [Getter],
          setLocale: [Getter],
          BaseSchema: [Getter]
        },
        '@yarnpkg/plugin-essentials' => {
          dedupeUtils: [Getter],
          default: [Getter],
          suggestUtils: [Getter]
        },
        '@yarnpkg/plugin-compat' => { default: [Getter] },
        '@yarnpkg/plugin-dlx' => { default: [Getter] },
        '@yarnpkg/plugin-file' => { default: [Getter], fileUtils: [Getter] },
        '@yarnpkg/plugin-git' => { default: [Getter], gitUtils: [Getter] },
        '@yarnpkg/plugin-github' => { default: [Getter] },
        '@yarnpkg/plugin-http' => { default: [Getter] },
        '@yarnpkg/plugin-init' => { default: [Getter] },
        '@yarnpkg/plugin-link' => { default: [Getter] },
        '@yarnpkg/plugin-nm' => { default: [Getter] },
        '@yarnpkg/plugin-npm' => {
          default: [Getter],
          npmConfigUtils: [Getter],
          npmHttpUtils: [Getter],
          npmPublishUtils: [Getter]
        },
        '@yarnpkg/plugin-npm-cli' => { default: [Getter] },
        '@yarnpkg/plugin-pack' => { default: [Getter], packUtils: [Getter] },
        '@yarnpkg/plugin-patch' => { default: [Getter], patchUtils: [Getter] },
        '@yarnpkg/plugin-pnp' => {
          PnpInstaller: [Getter],
          PnpLinker: [Getter],
          default: [Getter],
          getPnpPath: [Getter],
          jsInstallUtils: [Getter],
          pnpUtils: [Getter],
          quotePathIfNeeded: [Getter]
        },
        '@yarnpkg/plugin-pnpm' => { default: [Getter] }
      },
      plugins: Set(16) {
        '@yarnpkg/plugin-essentials',
        '@yarnpkg/plugin-compat',
        '@yarnpkg/plugin-dlx',
        '@yarnpkg/plugin-file',
        '@yarnpkg/plugin-git',
        '@yarnpkg/plugin-github',
        '@yarnpkg/plugin-http',
        '@yarnpkg/plugin-init',
        '@yarnpkg/plugin-link',
        '@yarnpkg/plugin-nm',
        '@yarnpkg/plugin-npm',
        '@yarnpkg/plugin-npm-cli',
        '@yarnpkg/plugin-pack',
        '@yarnpkg/plugin-patch',
        '@yarnpkg/plugin-pnp',
        '@yarnpkg/plugin-pnpm'
      }
    },
    quiet: false
  },
  cli: {
    binaryLabel: 'Yarn Package Manager',
    binaryName: 'yarn',
    binaryVersion: '3.2.2',
    enableCapture: false,
    enableColors: undefined,
    definitions: [Function: definitions],
    error: [Function: error],
    format: [Function: format],
    process: [Function: process],
    run: [Function: run],
    usage: [Function: usage]
  }
}